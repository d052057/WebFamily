// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebFamily.Models;

public partial class WebFamilyDbContext : DbContext
{
    public WebFamilyDbContext(DbContextOptions<WebFamilyDbContext> options)
        : base(options)
    {
    }
    public virtual DbSet<MediaView> MediaViews { get; set; }

    public virtual DbSet<MoviesView> MoviesViews { get; set; }
    public virtual DbSet<VideosView> VideosViews { get; set; }
    public virtual DbSet<MusicsView> MusicsViews { get; set; }
    public virtual DbSet<MediaDirectory> MediaDirectories { get; set; }

    public virtual DbSet<MediaMenu> MediaMenus { get; set; }

    public virtual DbSet<MediaMetaDatum> MediaMetaData { get; set; }

    public virtual DbSet<Rpm> Rpms { get; set; }

    public virtual DbSet<RpmTrack> RpmTracks { get; set; }

    public virtual DbSet<TodoList> TodoLists { get; set; }

    public virtual DbSet<WebTube> WebTubes { get; set; }

    public virtual DbSet<WebTubeSeries> WebTubeSeries { get; set; }
    public virtual DbSet<AmericanMusicsDirectoryView> AmericanMusicsDirectoryViews { get; set; }

    public virtual DbSet<AmericanMusicsView> AmericanMusicsViews { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MediaDirectory>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_directory");

            entity.ToTable("MediaDirectory");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Directory)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.MenuId).HasColumnName("menuId");

            entity.HasOne(d => d.Menu).WithMany(p => p.MediaDirectories)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("FK_MediaDirectory_MediaMenu");
        });

        modelBuilder.Entity<MediaMenu>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("MediaMenu");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Menu)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("menu");
        });

        modelBuilder.Entity<MediaMetaDatum>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_metaData");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Caption)
                .HasMaxLength(200)
                .HasColumnName("caption");
            entity.Property(e => e.Datetime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.DirectoryId).HasColumnName("directoryId");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");

            entity.HasOne(d => d.Directory).WithMany(p => p.MediaMetaData)
                .HasForeignKey(d => d.DirectoryId)
                .HasConstraintName("FK_MediaMetaData_MediaDirectory");
        });

        modelBuilder.Entity<Rpm>(entity =>
        {
            entity.HasKey(e => e.RecordId).HasName("PK_rpm");

            entity.ToTable("Rpm");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.AudioType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("audioType");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("type");
        });

        modelBuilder.Entity<RpmTrack>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("RpmTrack");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.RpmId).HasColumnName("rpmId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("title");

            entity.HasOne(d => d.Rpm).WithMany(p => p.RpmTracks)
                .HasForeignKey(d => d.RpmId)
                .HasConstraintName("FK_RpmTrack_rpm");
        });

        modelBuilder.Entity<TodoList>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("TodoList");

            entity.Property(e => e.RecordId).ValueGeneratedNever();
            entity.Property(e => e.Assigned).HasMaxLength(50);
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Note).IsRequired();
        });



        modelBuilder.Entity<WebTube>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.ToTable("WebTube");

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.Category)
                .HasMaxLength(100)
                .HasColumnName("category");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(4000)
                .HasColumnName("note");
            entity.Property(e => e.ThumbnailDefaultHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbnailDefaultHeight");
            entity.Property(e => e.ThumbnailDefaultUrl)
                .HasMaxLength(500)
                .HasColumnName("thumbnailDefaultUrl");
            entity.Property(e => e.ThumbnailDefaultWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbnailDefaultWidth");
            entity.Property(e => e.ThumbnailHighHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbnailHighHeight");
            entity.Property(e => e.ThumbnailHighUrl)
                .HasMaxLength(500)
                .HasColumnName("thumbnailHighUrl");
            entity.Property(e => e.ThumbnailHighWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbnailHighWidth");
            entity.Property(e => e.ThumbnailMaxresHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbnailMaxresHeight");
            entity.Property(e => e.ThumbnailMaxresUrl)
                .HasMaxLength(500)
                .HasColumnName("thumbnailMaxresUrl");
            entity.Property(e => e.ThumbnailMaxresWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbnailMaxresWidth");
            entity.Property(e => e.ThumbnailMediumHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbnailMediumHeight");
            entity.Property(e => e.ThumbnailMediumUrl)
                .HasMaxLength(500)
                .HasColumnName("thumbnailMediumUrl");
            entity.Property(e => e.ThumbnailMediumWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbnailMediumWidth");
            entity.Property(e => e.ThumbnailStandardHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbnailStandardHeight");
            entity.Property(e => e.ThumbnailStandardUrl)
                .HasMaxLength(500)
                .HasColumnName("thumbnailStandardUrl");
            entity.Property(e => e.ThumbnailStandardWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbnailStandardWidth");
            entity.Property(e => e.VideoId)
                .HasMaxLength(50)
                .HasColumnName("videoId");
            entity.Property(e => e.VideoListId)
                .HasMaxLength(50)
                .HasColumnName("videoListId");
            entity.Property(e => e.WebTubeLink)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("webTubeLink");
            entity.Property(e => e.WebTubeTitle)
                .HasMaxLength(500)
                .HasColumnName("webTubeTitle");
        });

        modelBuilder.Entity<WebTubeSeries>(entity =>
        {
            entity.HasKey(e => e.RecordId);

            entity.Property(e => e.RecordId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("recordId");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("dateTime");
            entity.Property(e => e.SeqNumber).HasColumnName("seqNumber");
            entity.Property(e => e.ThumbNailDefaultHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbNailDefaultHeight");
            entity.Property(e => e.ThumbNailDefaultUrl)
                .HasMaxLength(100)
                .HasColumnName("thumbNailDefaultUrl");
            entity.Property(e => e.ThumbNailDefaultWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbNailDefaultWidth");
            entity.Property(e => e.ThumbNailHighHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbNailHighHeight");
            entity.Property(e => e.ThumbNailHighUrl)
                .HasMaxLength(100)
                .HasColumnName("thumbNailHighUrl");
            entity.Property(e => e.ThumbNailHighWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbNailHighWidth");
            entity.Property(e => e.ThumbNailMaxresHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbNailMaxresHeight");
            entity.Property(e => e.ThumbNailMaxresUrl)
                .HasMaxLength(100)
                .HasColumnName("thumbNailMaxresUrl");
            entity.Property(e => e.ThumbNailMaxresWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbNailMaxresWidth");
            entity.Property(e => e.ThumbNailMediumHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbNailMediumHeight");
            entity.Property(e => e.ThumbNailMediumUrl)
                .HasMaxLength(100)
                .HasColumnName("thumbNailMediumUrl");
            entity.Property(e => e.ThumbNailMediumWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbNailMediumWidth");
            entity.Property(e => e.ThumbNailStandardHeight)
                .HasMaxLength(10)
                .HasColumnName("thumbNailStandardHeight");
            entity.Property(e => e.ThumbNailStandardUrl)
                .HasMaxLength(100)
                .HasColumnName("thumbNailStandardUrl");
            entity.Property(e => e.ThumbNailStandardWidth)
                .HasMaxLength(10)
                .HasColumnName("thumbNailStandardWidth");
            entity.Property(e => e.VideoId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("videoId");
            entity.Property(e => e.VideoTitle)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("videoTitle");
            entity.Property(e => e.WebTubeId).HasColumnName("webTubeId");

            entity.HasOne(d => d.WebTube).WithMany(p => p.WebTubeSeries)
                .HasForeignKey(d => d.WebTubeId)
                .HasConstraintName("FK_WebTubeSeries_WebTube");
        });
        modelBuilder.Entity<AmericanMusicsDirectoryView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("americanMusicsDirectoryView");

            entity.Property(e => e.Directory)
                .HasMaxLength(200)
                .HasColumnName("directory");
        });

        modelBuilder.Entity<AmericanMusicsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("americanMusicsView");

            entity.Property(e => e.Caption)
                .HasMaxLength(200)
                .HasColumnName("caption");
            entity.Property(e => e.Datetime)
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Directory)
                .HasMaxLength(200)
                .HasColumnName("directory");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");
        });
        modelBuilder.Entity<MediaView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("mediaView");

            entity.Property(e => e.Directory)
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.DirectoryId).HasColumnName("directoryId");
            entity.Property(e => e.Menu)
                .HasMaxLength(50)
                .HasColumnName("menu");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.MenuId).HasColumnName("menuId");
            entity.Property(e => e.RecordId).HasColumnName("recordId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");
        });

        modelBuilder.Entity<MoviesView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("moviesView");

            entity.Property(e => e.Assets)
                .HasMaxLength(65)
                .HasColumnName("assets");
            entity.Property(e => e.Directory)
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.RecordId).HasColumnName("recordId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");
        });

        modelBuilder.Entity<MusicsView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("musicsView");

            entity.Property(e => e.Assets)
                .HasMaxLength(65)
                .HasColumnName("assets");
            entity.Property(e => e.Directory)
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.RecordId).HasColumnName("recordId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");
        });

        modelBuilder.Entity<VideosView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("videosView");

            entity.Property(e => e.Assets)
                .HasMaxLength(65)
                .HasColumnName("assets");
            entity.Property(e => e.Directory)
                .HasMaxLength(50)
                .HasColumnName("directory");
            entity.Property(e => e.Duration)
                .HasMaxLength(50)
                .HasColumnName("duration");
            entity.Property(e => e.RecordId).HasColumnName("recordId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("type");
        });
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}